//每个 Go 程序都是由包构成的。
//程序从 main 包开始运行。

package main

//本程序通过导入路径 "fmt" 和 "math/rand" 来使用这两个包。
//按照约定，包名与导入路径的最后一个元素一致。例如，"math/rand" 包中的源码均以 package rand 语句开始。

// import (
// 	"fmt"
// 	"math/rand"
// )

import (
	"fmt"
)

var c, python, java bool
var i, j int = 1, 2

func main() {
	// var i int
	var c, python, java = true, false, "no!"
	fmt.Println(i, j, c, python, java)
}

// func main() {
// 	// fmt.Println(add(1, 7))
// 	a, b := split(17)

// 	// fmt.Println(split(17))

// 	fmt.Println(a, b)
// }

// func add() int {
// 	return 1 + 8
// }

// func add(x, y int) int {
// 	return x + y
// }

func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return
}

func add(x int, y int) int {
	return x + y
}

func swap(x, y string) (string, string) {
	return y, x
}

// package main

// import "fmt"
// import "net/http"
// import "io/ioutil"
// import "strings"
// import "net/http/cookiejar"

// func main() {
// 	resp, cookie := httpCurl("POST", "http://192.168.9.214/index/index/login", "username=admin&password=admin", nil)
// 	fmt.Printf("%s", resp)
// 	resp, cookie = httpCurl("GET", "http://192.168.9.214/index/index/index", "", cookie)
// 	fmt.Printf("%s", resp)
// }

// // httpCurl 模拟网络请求
// // 参数:method 模式 ["GET","POST"] / url / data / cookie
// // 返回:return body 响应内容 / 返回 cookie
// func httpCurl(method string, url string, data string, cookie []*http.Cookie) ([]byte, []*http.Cookie) {
// 	client := &http.Client{}
// 	req, _ := http.NewRequest(method, url, strings.NewReader(data))
// 	jar, _ := cookiejar.New(nil)
// 	jar.SetCookies(req.URL, cookie)
// 	client.Jar = jar
// 	resp, err := client.Do(req)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	body, err := ioutil.ReadAll(resp.Body)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	re_cookie := resp.Cookies()
// 	resp.Body.Close()
// 	return body, re_cookie
// }
